---
- name: Create /usr/bin/dcm directory
  file:
    path: /usr/bin/dcm
    state: directory
    owner: root
    group: root
    mode: 0755
  when: site == "iwl"

- name: Check if dcm.service file exists
  stat:
    path: /etc/systemd/system/dcm.service 
  register: dcm_service_file
  when: site == "iwl"

- name: Stop DCM service
  shell: systemctl stop dcm.service
  when: site == "iwl" and dcm_service_file.stat.exists == true

- name: Remove dcm-python directory if exists
  file:
    path: /usr/bin/dcm/dcm-python
    state: absent 
  when: site == "iwl"

- name: Extract dcm-python module
  unarchive:
    src: dcm-python.tar.gz
    dest: /usr/bin/dcm
  when: site == "iwl"

- name: Installation of required packages
  apt:
    name: ['openjdk-8-jdk', 'python3', 'python3-pip', 'curl']
    update_cache: yes
  when: not update_module

- name: Select default locale
  debconf:
    name: locales
    question: locales/default_environment_locale
    value: en_US.UTF-8
    vtype: select
  notify:
    - Rebuild locales database

- name: Build /etc/locale.gen
  lineinfile:
    dest: /etc/locale.gen
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: "{{ item.state }}"
  with_items:
    - { regexp: '^#? ?de_DE ISO-8859-1', line: 'de_DE ISO-8859-1', state: present }
    - { regexp: '^#? ?de_DE.UTF-8 UTF-8', line: 'de_DE.UTF-8 UTF-8', state: present }
    - { regexp: '^#? ?de_DE@euro ISO-8859-15', line: 'de_DE@euro ISO-8859-15', state: present }
    - { regexp: '^#? ?en_GB ISO-8859-1', line: 'en_GB ISO-8859-1', state: present }
    - { regexp: '^#? ?en_GB.ISO-8859-15 ISO-8859-15', line: 'en_GB.ISO-8859-15 ISO-8859-15', state: present }
    - { regexp: '^#? ?en_GB.UTF-8 UTF-8', line: 'en_GB.UTF-8 UTF-8', state: present }
    - { regexp: '^#? ?en_US ISO-8859-1', line: 'en_US ISO-8859-1', state: present }
    - { regexp: '^#? ?en_US.ISO-8859-15 ISO-8859-15', line: 'en_US.ISO-8859-15 ISO-8859-15', state: present }
    - { regexp: '^#? ?en_US.UTF-8 UTF-8', line: 'en_US.UTF-8 UTF-8', state: present }
  notify:
    - Rebuild locales database

- name: Check if Kafka exists
  stat:
    path: /opt/kafka
  register: kafka_exists

- name: Stop Kafka service
  shell: systemctl stop kafka.service
  when: kafka_exists.stat.exists == true

- name: Stop Zookeeper service
  shell: systemctl stop zookeeper.service
  when: kafka_exists.stat.exists == true

- name: Remove Kafka repository if exists
  file:
    path: /opt/kafka
    state: absent 
  when: not update_module

- name: Download and extract Kafka
  unarchive:
    src: https://apache.brunneis.com/kafka/{{kafka_version}}/kafka_2.12-{{kafka_version}}.tgz
    dest: /opt
    remote_src: yes
  when: not update_module

- name: Change name to Kafka 
  shell: mv /opt/kafka_2.12-{{kafka_version}} /opt/kafka
  when: not update_module

- name: Include listener for the Kafka Socket Server Settings
  lineinfile:
    path: /opt/kafka/config/server.properties
    regexp: '#listeners=PLAINTEXT://:9092'
    line: 'listeners=PLAINTEXT://0.0.0.0:9092'
  when: not update_module

- name: Include advertised listener for the Kafka Socket Server Settings
  lineinfile:
    path: /opt/kafka/config/server.properties
    regexp: '#advertised.listeners=PLAINTEXT://your.host.name:9092'
    line: "advertised.listeners=PLAINTEXT://{{ansible_host}}:9092"
  when: not update_module

- name: Include broker-id, depending on the broker to be configured
  lineinfile:
    path: /opt/kafka/config/server.properties
    regexp: 'broker.id=0'
    line: "broker.id=1"
  when: not update_module and site == "iwl"

- name: Include broker-id, depending on the broker to be configured
  lineinfile:
    path: /opt/kafka/config/server.properties
    regexp: 'broker.id=0'
    line: "broker.id=2"
  when: not update_module and site == "spain"

- name: Include broker-id, depending on the broker to be configured
  lineinfile:
    path: /opt/kafka/config/server.properties
    regexp: 'broker.id=0'
    line: "broker.id=3"
  when: not update_module and site == "italy"

- name: Include broker-id, depending on the broker to be configured
  lineinfile:
    path: /opt/kafka/config/server.properties
    regexp: 'broker.id=0'
    line: "broker.id=4"
  when: not update_module and site == "france"

- name: Include broker-id, depending on the broker to be configured
  lineinfile:
    path: /opt/kafka/config/server.properties
    regexp: 'broker.id=0'
    line: "broker.id=5"
  when: not update_module and site == "greece"

- name: Change Zookeeper IP address
  lineinfile:
    path: /opt/kafka/config/server.properties
    regexp: 'zookeeper.connect=localhost:2181'
    line: "zookeeper.connect={{zookeeper_ip_address}}:2181"
  when: not update_module

- name: Remove Kafka logs
  file:
    path: /tmp/kafka-logs/
    state: absent
  when: not update_module

- name: Delete topic enable
  lineinfile:
    path: /opt/kafka/config/server.properties
    line: 'delete.topic.enable=true'
    insertafter: EOF
  when: not update_module

- name: Auto create topics disable
  lineinfile:
    path: /opt/kafka/config/server.properties
    line: 'auto.create.topics.enable=false'
    insertafter: EOF
  when: not update_module

- name: Check if /etc/sudoers file has been modified previously
  shell: cat /etc/sudoers | grep "{{ansible_user}}" | grep NOPASSWD | wc -w
  register: etc_sudoers_check

- name: Avoid asking for password with sudo commands
  shell: echo "{{ansible_user}} ALL=(ALL) NOPASSWD"{{":"}}" ALL" | sudo tee -a /etc/sudoers > /dev/null
  when: etc_sudoers_check.stdout == "0"

- name: Press enter to continue
  pause: prompt='Press enter to continue'
  when: prompt_when_finishes_tasks
